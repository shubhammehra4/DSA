class Twitter {
    constructor() {
        this.tweets = [];
        this.following = new Map();
    }

    /**
     * O(1)
     * @param {number} userId
     * @param {number} tweetId
     * @return {void}
     */
    postTweet(userId, tweetId) {
        this.tweets.push({ userId, tweetId });
    }

    /**
     * O(10 * logf)
     * @param {number} userId
     * @return {number[]}
     */
    getNewsFeed(userId) {
        const n = this.tweets.length;
        let res = [];
        let cnt = 0;

        for (let i = n - 1; i >= 0 && cnt < 10; i--) {
            const tweet = this.tweets[i];
            const isFollowing = this.following.has(userId) &&
                this.following.get(userId).has(tweet.userId);

            if (tweet.userId === userId || isFollowing) {
                res.push(tweet.tweetId);
                cnt++;
            }
        }

        return res;
    }

    /**
     * O(logf)
     * @param {number} followerId
     * @param {number} followeeId
     * @return {void}
     */
    follow(followerId, followeeId) {
        if (!this.following.has(followerId))
            this.following.set(followerId, new Set());

        this.following.get(followerId).add(followeeId);
    }
    /**
     * O(logf)
     * @param {number} followerId
     * @param {number} followeeId
     * @return {void}
     */
    unfollow(followerId, followeeId) {
        if (this.following.has(followerId))
            this.following.get(followerId).delete(followeeId);
    }
}


/**
 * Your Twitter object will be instantiated and called as such:
 * var obj = new Twitter()
 * obj.postTweet(userId,tweetId)
 * var param_2 = obj.getNewsFeed(userId)
 * obj.follow(followerId,followeeId)
 * obj.unfollow(followerId,followeeId)
 */
